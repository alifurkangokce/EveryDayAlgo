package main

import "fmt"

type TreeNode struct {
	Val   int
	Left  *TreeNode
	Right *TreeNode
}
type ListNode struct {
	Val  int
	Next *ListNode
}

func main() {
	//fmt.Print(TwoSum([]int{3, 2, 4}, 6))
	// fmt.Print(isPalindrome(121))
	//fmt.Print(romanToInt("MCMXCIV"))
	//fmt.Print(longestCommonPrefix([]string{"flower", "flow", "flight"}))
	//fmt.Print(isValid("(([]))"))
	//fmt.Print(mergeTwoLists(&ListNode{Val: 1, Next: &ListNode{Val: 2, Next: &ListNode{Val: 4}}}, &ListNode{Val: 1, Next: &ListNode{Val: 3, Next: &ListNode{Val: 4}}}))
	//fmt.Print(removeDuplicates([]int{0, 0, 1, 1, 1, 2, 2, 3, 3, 4}))
	//fmt.Print(strStr("hello", "ll"))
	//fmt.Print(searchInsert([]int{1, 3, 5, 6}, 2))
	//fmt.Print(maxSubArray([]int{-2, 1, -3, 4, -1, 2, 1, -5, 4}))
	//fmt.Print(lengthOfLastWord("   fly me   to   the moon  "))
	//fmt.Print(plusOne([]int{8}))
	//fmt.Print(addBinary("11", "1"))
	//fmt.Print(mySqrt(8))
	//fmt.Print(climbStairs(5))
	//merge([]int{1, 2, 3, 0, 0, 0}, 3, []int{2, 5, 6}, 3)
	//fmt.Print(inorderTraversal(&TreeNode{Val: 1, Right: &TreeNode{Val: 2, Left: &TreeNode{Val: 3}}}))
	//fmt.Print(isSameTree(&TreeNode{Val: 1, Left: &TreeNode{Val: 2, Left: &TreeNode{Val: 3}}}, &TreeNode{Val: 1, Left: &TreeNode{Val: 2, Left: &TreeNode{Val: 3}}}))
	//fmt.Print(isSymmetric(&TreeNode{Val: 1, Left: &TreeNode{Val: 2, Left: &TreeNode{Val: 3}}}))
	//fmt.Print(maxDepth(&TreeNode{Val: 1, Left: &TreeNode{Val: 2}, Right: &TreeNode{Val: 3}}))
	//fmt.Print(sortedArrayToBST([]int{-10, -3, 0, 5, 9}))
	//fmt.Print(isBalanced(&TreeNode{Val: 1, Left: &TreeNode{Val: 2, Left: &TreeNode{Val: 3}}, Right: &TreeNode{Val: 2, Left: &TreeNode{Val: 3}}}))
	//fmt.Print(minDepth(&TreeNode{Val: 1, Left: &TreeNode{Val: 2, Left: &TreeNode{Val: 3}}, Right: &TreeNode{Val: 2, Left: &TreeNode{Val: 3}}}))
	//fmt.Print(hasPathSum(&TreeNode{Val: 1, Left: &TreeNode{Val: 2, Left: &TreeNode{Val: 4}}, Right: &TreeNode{Val: 7, Left: &TreeNode{Val: 3}}}, 6))
	//fmt.Print(generate(5))
	//fmt.Print(getRow(3))
	//fmt.Print(maxProfit([]int{7, 6, 4, 3, 1}))
	//fmt.Print(isPalindromeString("A man, a plan, a canal: Panama"))
	//fmt.Print(singleNumber([]int{1, 2, 1}))
	//fmt.Print(hasCycle(&ListNode{Val: 1, Next: &ListNode{Val: 2}}))
	//fmt.Print(preorderTraversal(&TreeNode{Val: 1, Right: &TreeNode{Val: 2, Left: &TreeNode{Val: 3}}}))
	//fmt.Print(postorderTraversal(&TreeNode{Val: 1, Right: &TreeNode{Val: 2, Left: &TreeNode{Val: 3}}}))
	//fmt.Print(getIntersectionNode(&ListNode{Val: 4, Next: &ListNode{Val: 1, Next: &ListNode{Val: 8, Next: &ListNode{Val: 4, Next: &ListNode{Val: 5, Next: nil}}}}}, &ListNode{Val: 6, Next: &ListNode{Val: 1, Next: &ListNode{Val: 8, Next: &ListNode{Val: 4, Next: &ListNode{Val: 5, Next: nil}}}}}))
	//fmt.Print(convertToTitle(701))
	//fmt.Print(titleToNumber("AB"))
	//fmt.Print(reverseBits(43261596))
	//fmt.Print(hammingWeight(11))
	//fmt.Print(isHappy(19))
	//fmt.Print(removeElements(&ListNode{Val: 1, Next: &ListNode{Val: 2, Next: &ListNode{Val: 6, Next: nil}}}, 6))
	//fmt.Print(isIsomorphic("paper", "title"))
	//fmt.Print(reverseList(&ListNode{Val: 1, Next: &ListNode{Val: 2, Next: &ListNode{Val: 6, Next: nil}}}))
	//fmt.Print(containsDuplicate([]int{1, 2, 3, 2}))
	//fmt.Print(containsNearbyDuplicate([]int{1, 0, 1, 1}, 1))
	// x := MyStack{}
	// x.Push(1)
	// x.Push(2)
	// fmt.Println(x.Top())
	// fmt.Println(x.Pop())
	// fmt.Println(x.Empty())
	//fmt.Print(invertTree(&TreeNode{Val: 4, Left: &TreeNode{Val: 2, Left: &TreeNode{Val: 1}, Right: &TreeNode{Val: 3}}, Right: &TreeNode{Val: 7, Left: &TreeNode{Val: 6}, Right: &TreeNode{Val: 9}}}))
	//fmt.Print(summaryRanges([]int{0, 1, 2, 4, 5, 7}))
	//fmt.Print(isPowerOfTwo(2))

	// x := MyQueue{}
	// x.Push(1)
	// x.Push(2)
	// x.Peek()
	// x.Pop()
	// x.Empty()
	//fmt.Print(isPalindromeLinked(&ListNode{Val: 1, Next: &ListNode{Val: 2, Next: &ListNode{Val: 2, Next: &ListNode{Val: 1, Next: nil}}}}))
	//fmt.Print(isAnagram("rat", "car"))
	//fmt.Print(binaryTreePaths(&TreeNode{Val: 1, Left: &TreeNode{Val: 2, Left: nil, Right: &TreeNode{Val: 5}}, Right: &TreeNode{Val: 3}}))
	//fmt.Print(addDigits(38))
	//fmt.Print(isUgly(14))
	//fmt.Print(missingNumber([]int{9, 6, 4, 2, 3, 5, 7, 0, 1}))
	//moveZeroes([]int{0, 1, 0, 3, 12})
	//fmt.Print(wordPattern("abba", "dog dog dog dog"))
	//fmt.Print(canWinNim(4))
	//fmt.Print(isPowerOfThree(27))
	//fmt.Print(countBits(5))
	//fmt.Print(isPowerOfFour(11))
	//reverseString([]byte{'A', ' ', 'm', 'a', 'n', ',', ' '})
	//fmt.Print(reverseVowels("hello"))
	//fmt.Print(intersection([]int{4, 9, 5}, []int{9, 4, 9, 8, 4}))
	//fmt.Print(intersection2([]int{4, 9, 5}, []int{9, 4, 9, 8, 4}))
	//fmt.Print(isPerfectSquare(25))
	//fmt.Print(canConstruct("a", "aab"))
	//fmt.Print(firstUniqChar("aabb"))
	//fmt.Print(findTheDifference("", "y"))
	//fmt.Print(isSubsequence("abc", "ahbgdc"))
	//fmt.Print(readBinaryWatch(1))
	//fmt.Print(sumOfLeftLeaves(&TreeNode{Val: 3, Left: &TreeNode{Val: 9, Left: nil, Right: nil}, Right: &TreeNode{Val: 20, Left: &TreeNode{Val: 15, Left: nil, Right: nil}, Right: &TreeNode{Val: 7, Left: nil, Right: nil}}}))
	//fmt.Print(sumOfLeftLeaves(&TreeNode{Val: 1, Left: &TreeNode{Val: 2, Left: &TreeNode{Val: 4, Left: nil, Right: nil}, Right: &TreeNode{Val: 5, Left: nil, Right: nil}}, Right: &TreeNode{Val: 3, Left: nil, Right: nil}}))
	//fmt.Print(toHex(26))
	//fmt.Print(longestPalindrome("abccccdd"))
	//fmt.Print(fizzBuzz(15))
	//fmt.Print(thirdMax([]int{1, 2}))
	//fmt.Print(addStrings("1", "9"))
	//fmt.Print(countSegments("Of all the gin joints in all the towns in all the world,   "))
	//fmt.Print(arrangeCoins(9))
	//fmt.Print(findDisappearedNumbers([]int{4, 3, 2, 7, 8, 2, 3, 1}))
	// fmt.Print(findContentChildren([]int{262, 437, 433, 102, 438, 346, 131, 160, 281, 34, 219, 373, 466, 275, 51, 118, 209, 32, 108, 57, 385, 514, 439, 73, 271, 442, 366, 515, 284, 425, 491, 466, 322, 34, 484, 231, 450, 355, 106, 279, 496, 312, 96, 461, 446, 422, 143, 98, 444, 461, 142, 234, 416, 45, 271, 344, 446, 364, 216, 16, 431, 370, 120, 463, 377, 106, 113, 406, 406, 481, 304, 41, 2, 174, 81, 220, 158, 104, 119, 95, 479, 323, 145, 205, 218, 482, 345, 324, 253, 368, 214, 379, 343, 375, 134, 145, 268, 56, 206}, []int{149, 79, 388, 251, 417, 82, 233, 377, 95, 309, 418, 400, 501, 349, 348, 400, 461, 495, 104, 330, 155, 483, 334, 436, 512, 232, 511, 40, 343, 334, 307, 56, 164, 276, 399, 337, 59, 440, 3, 458, 417, 291, 354, 419, 516, 4, 370, 106, 469, 254, 274, 163, 345, 513, 130, 292, 330, 198, 142, 95, 18, 295, 126, 131, 339, 171, 347, 199, 244, 428, 383, 43, 315, 353, 91, 289, 466, 178, 425, 112, 420, 85, 159, 360, 241, 300, 295, 285, 310, 76, 69, 297, 155, 416, 333, 416, 226, 262, 63, 445, 77, 151, 368, 406, 171, 13, 198, 30, 446, 142, 329, 245, 505, 238, 352, 113, 485, 296, 337, 507, 91, 437, 366, 511, 414, 46, 78, 399, 283, 106, 202, 494, 380, 479, 522, 479, 438, 21, 130, 293, 422, 440, 71, 321, 446, 358, 39, 447, 427, 6, 33, 429, 324, 76, 396, 444, 519, 159, 45, 403, 243, 251, 373, 251, 23, 140, 7, 356, 194, 499, 276, 251, 311, 10, 147, 30, 276, 430, 151, 519, 36, 354, 162, 451, 524, 312, 447, 77, 170, 428, 23, 283, 249, 466, 39, 58, 424, 68, 481, 2, 173, 179, 382, 334, 430, 84, 151, 293, 95, 522, 358, 505, 63, 524, 143, 119, 325, 401, 6, 361, 284, 418, 169, 256, 221, 330, 23, 72, 185, 376, 515, 84, 319, 27, 66, 497}))
	//fmt.Print(repeatedSubstringPattern("abcabcabcabc"))
	//fmt.Print(hammingDistance(1, 4))
	//fmt.Print(islandPerimeter([][]int{{0, 1, 0, 0}, {1, 1, 1, 0}, {0, 1, 0, 0}, {1, 1, 0, 0}}))
	//fmt.Print(findComplement(5))
	//fmt.Print(findMaxConsecutiveOnes([]int{1, 1, 0, 1, 1, 1}))
	//fmt.Print(constructRectangle(122122))
	//fmt.Print(findPoisonedDuration([]int{1, 4}, 2))
	//fmt.Print(nextGreaterElement([]int{2, 4}, []int{1, 2, 3, 4}))
	//fmt.Print(findWords([]string{"adsdf", "sfd"}))
	//fmt.Print(findMode(&TreeNode{Val: 1, Left: nil, Right: &TreeNode{Val: 1, Left: &TreeNode{Val: 2}, Right: &TreeNode{Val: 2}}}))
	//fmt.Print(convertToBase7(-7))
	fmt.Print(findRelativeRanks([]int{5, 4, 3, 2, 1}))
}
